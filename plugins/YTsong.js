const { cmd, commands } = require("../command");
const yts = require("yt-search");
const { ytmp3 } = require("@vreden/youtube_scraper");

cmd(
  {
    pattern: "song",
    react: "üéµ",
    desc: "Download Song",
    category: "download",
    filename: __filename,
  },
  async (
    robin,
    mek,
    m,
    { from, q, reply }
  ) => {
    try {
      if (!q) return reply("*Please provide link or song name* üåö‚ù§Ô∏è");

      const search = await yts(q);
      const data = search.videos[0];
      if (!data) return reply("‚ùå No results found.");

      const url = data.url;

      const desc = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚¨£
‚îÇ  üß© *MAHII-MD DOWNLOADER* üß©
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚¨£

üé∂ *Song Title:* ${data.title}

‚è±Ô∏è *Duration:* ${data.timestamp}

üìÖ *Uploaded:* ${data.ago}

üëÅÔ∏è *Views:* ${data.views}

üîó *Link:* ${url}

*ùôàùòºùòøùôÄ ùòΩùôî ùôàùôÑùôÉùôÑùôçùòºùôâùôÇùòº*
`;

      await robin.sendMessage(
        from,
        { image: { url: data.thumbnail }, caption: desc },
        { quoted: mek }
      );

      const quality = "128";
      const songData = await ytmp3(url, quality);
      if (!songData?.download?.url) return reply("‚ùå Failed to fetch audio file.");

      let durationParts = data.timestamp.split(":").map(Number);
      let totalSeconds =
        durationParts.length === 3
          ? durationParts[0] * 3600 + durationParts[1] * 60 + durationParts[2]
          : durationParts[0] * 60 + durationParts[1];

      if (totalSeconds > 1800) return reply("‚è±Ô∏è Audio limit is 30 minutes.");

      await robin.sendMessage(
        from,
        {
          audio: { url: songData.download.url },
          mimetype: "audio/mpeg",
          fileName: `${data.title}.mp3`,
        },
        { quoted: mek }
      );

      return reply("*‚úÖ Thanks for using my bot* ‚ù§Ô∏è");
    } catch (e) {
      console.error(e);
      reply(`‚ùå Error: ${e.message}`);
    }
  }
);
